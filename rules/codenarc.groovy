ruleset {
    // rulesets/basic.xml
    AssertWithinFinallyBlock(priority: 1)
    AssignmentInConditional(priority: 1)
    BigDecimalInstantiation(priority: 1)
    BitwiseOperatorInConditional(priority: 1)
    BooleanGetBoolean(priority: 1)
    BrokenNullCheck(priority: 1)
    BrokenOddnessCheck(priority: 1)
    ClassForName(priority: 1)
    ComparisonOfTwoConstants(priority: 1)
    ComparisonWithSelf(priority: 1)
    ConstantAssertExpression(priority: 1)
    ConstantIfExpression(priority: 1)
    ConstantTernaryExpression(priority: 1)
    DeadCode(priority: 1)
    DoubleNegative(priority: 1)
    DuplicateCaseStatement(priority: 1)
    DuplicateMapKey(priority: 1)
    DuplicateSetValue(priority: 1)
    EmptyCatchBlock(priority: 1)
    EmptyClass(priority: 1)
    EmptyElseBlock(priority: 1)
    EmptyFinallyBlock(priority: 1)
    EmptyForStatement(priority: 1)
    EmptyIfStatement(priority: 1)
    EmptyInstanceInitializer(priority: 1)
    EmptyMethod(priority: 1, doNotApplyToClassNames: '*Controller')
    EmptyStaticInitializer(priority: 1)
    EmptySwitchStatement(priority: 1)
    EmptySynchronizedStatement(priority: 1)
    EmptyTryBlock(priority: 1)
    EmptyWhileStatement(priority: 1)
    EqualsAndHashCode(priority: 1)
    EqualsOverloaded(priority: 3)
    ExplicitGarbageCollection(priority: 1)
    ForLoopShouldBeWhileLoop(priority: 1)
    HardCodedWindowsFileSeparator(priority: 1)
    HardCodedWindowsRootDirectory(priority: 1)
    IntegerGetInteger(priority: 1)
    MultipleUnaryOperators(priority: 1)
    RandomDoubleCoercedToZero(priority: 1)
    RemoveAllOnSelf(priority: 1)
    ReturnFromFinallyBlock(priority: 1)
    ThrowExceptionFromFinallyBlock(priority: 1)

    // rulesets/braces.xml
    ElseBlockBraces(priority: 1)
    ForStatementBraces(priority: 1)
    IfStatementBraces(priority: 1)
    WhileStatementBraces(priority: 1)

    // rulesets/concurrency.xml
    BusyWait(priority: 1)
    DoubleCheckedLocking(priority: 1)
    InconsistentPropertyLocking(priority: 1)
    InconsistentPropertySynchronization(priority: 1)
    NestedSynchronization(priority: 1)
    StaticCalendarField(priority: 1)
    StaticConnection(priority: 1)
    StaticDateFormatField(priority: 1)
    StaticMatcherField(priority: 1)
    StaticSimpleDateFormatField(priority: 1)
    SynchronizedMethod(priority: 1)
    SynchronizedOnBoxedPrimitive(priority: 1)
    SynchronizedOnGetClass(priority: 1)
    SynchronizedOnReentrantLock(priority: 1)
    SynchronizedOnString(priority: 1)
    SynchronizedOnThis(priority: 1)
    SynchronizedReadObjectMethod(priority: 1)
    SystemRunFinalizersOnExit(priority: 1)
    ThisReferenceEscapesConstructor(priority: 1)
    ThreadGroup(priority: 1)
    ThreadLocalNotStaticFinal(priority: 1)
    ThreadYield(priority: 1)
    UseOfNotifyMethod(priority: 1)
    VolatileArrayField(priority: 1)
    VolatileLongOrDoubleField(priority: 1)
    WaitOutsideOfWhileLoop(priority: 1)

    // rulesets/convention.xml
    ConfusingTernary(priority: 3)
    CouldBeElvis(priority: 3)
    HashtableIsObsolete(priority: 1)
    //IfStatementCouldBeTernary
    InvertedIfElse(priority: 1)
    LongLiteralWithLowerCaseL(priority: 1)
    NoDef(priority: 3, doNotApplyToFilesMatching: /.*Spec\.groovy/)
    ParameterReassignment(priority: 3)
    TernaryCouldBeElvis(priority: 1)
    VectorIsObsolete(priority: 1)

    // rulesets/design.xml
    AbstractClassWithPublicConstructor(priority: 3)
    AbstractClassWithoutAbstractMethod(priority: 3)
    AssignmentToStaticFieldFromInstanceMethod(priority: 1, doNotApplyToClassNames: '*Spec')
    BooleanMethodReturnsNull(priority: 1)
    BuilderMethodWithSideEffects(priority: 3)
    CloneableWithoutClone(priority: 1)
    CloseWithoutCloseable(priority: 1)
    CompareToWithoutComparable(priority: 1)
    ConstantsOnlyInterface(priority: 1)
    EmptyMethodInAbstractClass(priority: 1)
    FinalClassWithProtectedMember(priority: 1)
    ImplementationAsType(priority: 1)
    //Instanceof
    LocaleSetDefault(priority: 1)
    NestedForLoop(priority: 3)
    PrivateFieldCouldBeFinal(priority: 2) // should be 1 but the check seems to have a bug resulting in false positives
    PublicInstanceField(priority: 1)
    ReturnsNullInsteadOfEmptyArray(priority: 1)
    ReturnsNullInsteadOfEmptyCollection(priority: 1)
    SimpleDateFormatMissingLocale(priority: 1)
    //StatelessSingleton
    ToStringReturnsNull(priority: 1)

    // rulesets/dry.xml
    //DuplicateListLiteral
    //DuplicateMapLiteral
    //DuplicateNumberLiteral
    //DuplicateStringLiteral

    // rulesets/enhanced.xml
    // Disabled due to the many WARN messages in the console
    // http://codenarc.sourceforge.net/codenarc-enhanced-classpath-rules.html
    //CloneWithoutCloneable(priority: 1)
    //JUnitAssertEqualsConstantActualValue(priority: 1)
    //UnsafeImplementationAsMap(priority: 1)

    // rulesets/exceptions.xml
    CatchArrayIndexOutOfBoundsException(priority: 1)
    CatchError(priority: 1)
    CatchException(priority: 3)
    CatchIllegalMonitorStateException(priority: 1)
    CatchIndexOutOfBoundsException(priority: 1)
    CatchNullPointerException(priority: 1)
    CatchRuntimeException(priority: 3)
    CatchThrowable(priority: 1)
    ConfusingClassNamedException(priority: 1)
    ExceptionExtendsError(priority: 1)
    ExceptionExtendsThrowable(priority: 1)
    ExceptionNotThrown(priority: 1)
    MissingNewInThrowStatement(priority: 1)
    ReturnNullFromCatchBlock(priority: 1, doNotApplyToClassNames: '*Controller')
    SwallowThreadDeath(priority: 1)
    ThrowError(priority: 1)
    ThrowException(priority: 1)
    ThrowNullPointerException(priority: 1)
    ThrowRuntimeException(priority: 1)
    ThrowThrowable(priority: 1)

    // rulesets/formatting.xml
    BlankLineBeforePackage(priority: 1)
    BracesForClass(priority: 1)
    BracesForForLoop(priority: 1)
    BracesForIfElse(priority: 1)
    BracesForMethod(priority: 1)
    BracesForTryCatchFinally(priority: 1, doNotApplyToClassNames: '*Spec')
    //ClassJavadoc
    ClosureStatementOnOpeningLineOfMultipleLineClosure(priority: 1)
    ConsecutiveBlankLines(priority: 3)
    //FileEndsWithoutNewline
    LineLength(priority: 3, length: 200, name: 'LineLengthWarning', description: 'Checks the maximum length for each line of source code. It checks for number of characters, so lines that include tabs may appear longer than the allowed number when viewing the file')
    LineLength(priority: 1, length: 250, name: 'LineLengthError', description: 'Checks the maximum length for each line of source code. It checks for number of characters, so lines that include tabs may appear longer than the allowed number when viewing the file')
    MissingBlankLineAfterImports(priority: 1)
    MissingBlankLineAfterPackage(priority: 1)
    SpaceAfterCatch(priority: 3)
    SpaceAfterClosingBrace(priority: 3)
    SpaceAfterComma(priority: 3)
    SpaceAfterFor(priority: 3)
    SpaceAfterIf(priority: 3)
    SpaceAfterOpeningBrace(priority: 3)
    SpaceAfterSemicolon(priority: 3)
    SpaceAfterSwitch(priority: 3)
    SpaceAfterWhile(priority: 3)
    SpaceAroundClosureArrow(priority: 3)
    //SpaceAroundMapEntryColon(priority: 1)
    SpaceAroundOperator(priority: 3)
    SpaceBeforeClosingBrace(priority: 3)
    SpaceBeforeOpeningBrace(priority: 3)
    TrailingWhitespace(priority: 3)

    // rulesets/grails.xml
    GrailsDomainHasEquals(priority: 2)
    GrailsDomainHasToString(priority: 2)
    GrailsDomainReservedSqlKeywordName(priority: 1)
    GrailsDomainWithServiceReference(priority: 1)
    GrailsDuplicateConstraint(priority: 1)
    GrailsDuplicateMapping(priority: 1)
    GrailsMassAssignment(priority: 1)
    GrailsPublicControllerMethod(enabled:false)
    GrailsServletContextReference(priority: 1)
    //GrailsSessionReference   // DEPRECATED
    GrailsStatelessService(priority: 3)

    // rulesets/groovyism.xml
    AssignCollectionSort(priority: 3)
    AssignCollectionUnique(priority: 3)
    ClosureAsLastMethodParameter(priority: 3)
    CollectAllIsDeprecated(priority: 1)
    ConfusingMultipleReturns(priority: 1)
    ExplicitArrayListInstantiation(priority: 1)
    ExplicitCallToAndMethod(priority: 1)
    ExplicitCallToCompareToMethod(priority: 1)
    ExplicitCallToDivMethod(priority: 1)
    ExplicitCallToEqualsMethod(priority: 1)
    ExplicitCallToGetAtMethod(priority: 1)
    ExplicitCallToLeftShiftMethod(priority: 1)
    ExplicitCallToMinusMethod(priority: 1)
    ExplicitCallToModMethod(priority: 1)
    ExplicitCallToMultiplyMethod(priority: 1)
    ExplicitCallToOrMethod(priority: 1)
    ExplicitCallToPlusMethod(priority: 1)
    ExplicitCallToPowerMethod(priority: 1)
    ExplicitCallToRightShiftMethod(priority: 1)
    ExplicitCallToXorMethod(priority: 1)
    ExplicitHashMapInstantiation(priority: 1)
    ExplicitHashSetInstantiation(priority: 1)
    ExplicitLinkedHashMapInstantiation(priority: 1)
    ExplicitLinkedListInstantiation(priority: 1)
    ExplicitStackInstantiation(priority: 1)
    ExplicitTreeSetInstantiation(priority: 1)
    GStringAsMapKey(priority: 1)
    //GStringExpressionWithinString
    GetterMethodCouldBeProperty(priority: 1)
    GroovyLangImmutable(priority: 1)
    UseCollectMany(priority: 1)
    UseCollectNested(priority: 1)

    // rulesets/imports.xml
    DuplicateImport(priority: 1)
    ImportFromSamePackage(priority: 1)
    ImportFromSunPackages(priority: 1)
    MisorderedStaticImports(priority: 3)
    NoWildcardImports(priority: 1)
    UnnecessaryGroovyImport(priority: 1)
    UnusedImport(priority: 1)

    // rulesets/jdbc.xml
    DirectConnectionManagement(priority: 1)
    JdbcConnectionReference(priority: 1)
    JdbcResultSetReference(priority: 1)
    JdbcStatementReference(priority: 1)

    // rulesets/junit.xml
    ChainedTest(priority: 1)
    CoupledTestCase(priority: 1)
    JUnitAssertAlwaysFails(priority: 1)
    JUnitAssertAlwaysSucceeds(priority: 1)
    JUnitFailWithoutMessage(priority: 1)
    JUnitLostTest(priority: 1)
    JUnitPublicField(priority: 1)
    JUnitPublicNonTestMethod(priority: 1)
    JUnitPublicProperty(priority: 1)
    JUnitSetUpCallsSuper(priority: 1)
    JUnitStyleAssertions(priority: 1)
    JUnitTearDownCallsSuper(priority: 1)
    JUnitTestMethodWithoutAssert(priority: 1)
    JUnitUnnecessarySetUp(priority: 1)
    JUnitUnnecessaryTearDown(priority: 1)
    JUnitUnnecessaryThrowsException(priority: 1)
    SpockIgnoreRestUsed(priority: 1)
    UnnecessaryFail(priority: 1)
    UseAssertEqualsInsteadOfAssertTrue(priority: 1)
    UseAssertFalseInsteadOfNegation(priority: 1)
    UseAssertNullInsteadOfAssertEquals(priority: 1)
    UseAssertSameInsteadOfAssertTrue(priority: 1)
    UseAssertTrueInsteadOfAssertEquals(priority: 1)
    UseAssertTrueInsteadOfNegation(priority: 1)

    // rulesets/logging.xml
    LoggerForDifferentClass(priority: 3)
    LoggerWithWrongModifiers(priority: 1)
    LoggingSwallowsStacktrace(priority: 1)
    MultipleLoggers(priority: 3)
    PrintStackTrace(priority: 1)
    Println(priority: 1)
    SystemErrPrint(priority: 1)
    SystemOutPrint(priority: 1)

    // rulesets/naming.xml
    AbstractClassName(priority: 1)
    ClassName(priority: 1)
    ClassNameSameAsFilename(priority: 1)
    ClassNameSameAsSuperclass(priority: 1)
    ConfusingMethodName(priority: 1)
    //FactoryMethodName(priority: 1)
    FieldName(priority: 1)
    InterfaceName(priority: 1)
    InterfaceNameSameAsSuperInterface(priority: 1)
    MethodName(priority: 1, doNotApplyToClassNames: '*Spec')
    ObjectOverrideMisspelledMethodName(priority: 1)
    PackageName(priority: 1, packageNameRequired: true)
    PackageNameMatchesFilePath(priority: 1)
    ParameterName(priority: 1)
    PropertyName(priority: 1)
    VariableName(priority: 1)

    // rulesets/security.xml
    FileCreateTempFile(priority: 1)
    InsecureRandom(priority: 1)
    //JavaIoPackageAccess(priority: 3)
    NonFinalPublicField(priority: 1)
    NonFinalSubclassOfSensitiveInterface(priority: 1)
    ObjectFinalize(priority: 1)
    PublicFinalizeMethod(priority: 1)
    SystemExit(priority: 1)
    UnsafeArrayDeclaration(priority: 1)

    // rulesets/serialization.xml
    EnumCustomSerializationIgnored(priority: 1)
    SerialPersistentFields(priority: 1)
    SerialVersionUID(priority: 1)
    //SerializableClassMustDefineSerialVersionUID

    // rulesets/size.xml
    ClassSize(priority: 3, maxLines: 300, name: 'ClassSizeWarning', description: 'A class that is 300 lines long is growing a bit fat, consider refactoring the logic into smaller classes with more focused responsibilities.')
    ClassSize(priority: 1, maxLines: 500, name: 'ClassSizeError', description: 'Avoid witnessing the birth of a god class and refactor classes that are 500 lines long!', doNotApplyToClassNames: '*Spec')
    CyclomaticComplexity(priority: 3, maxMethodComplexity: 10, maxClassAverageMethodComplexity: 30, ignoreMethodNames: 'equals, hashCode', name: 'CyclomaticComplexityWarning', description: 'Cyclomatic complexity of 10 indicates too much (branching) is happening in a single method, consider refatoring.')
    CyclomaticComplexity(priority: 1, maxMethodComplexity: 15, maxClassAverageMethodComplexity: 60, ignoreMethodNames: 'equals, hashCode', name: 'CyclomaticComplexityError', description: 'Cyclomatic complexity of 15 is way too much, something is wrong, time to refactor!')
    MethodCount(priority: 3, maxMethods: 60, name: 'MethodCountWarning', description: 'A class with 60 methods is probably a good suspect for refactoring.')
    MethodCount(priority: 1, maxMethods: 100, name: 'MethodCountError', description: 'A class with 100 methods must be refactored!')
    MethodSize(priority: 3, maxLines: 40, ignoreMethodNames: 'equals, hashCode', name: 'MethodSizeWarning', description: 'A 40 line method is a good target for refactoring.', doNotApplyToClassNames: '*Spec')
    MethodSize(priority: 1, maxLines: 80, ignoreMethodNames: 'equals, hashCode', name: 'MethodSizeError', description: 'A 80 line method is too long, refactor it!')
    NestedBlockDepth(priority: 3, maxNestedBlockDepth: 3, name: 'NestedBlockDepthWarning', description: 'Blocks nested 3 levels deep are getting a bit too complex, consider refactoring.', doNotApplyToClassNames: '*Spec')
    NestedBlockDepth(priority: 1, maxNestedBlockDepth: 4, name: 'NestedBlockDepthError', description: 'Blocks nested 4 levels deep is just too deep, time to refactor!')

    // rulesets/unnecessary.xml
    AddEmptyString(priority: 1)
    ConsecutiveLiteralAppends(priority: 1)
    ConsecutiveStringConcatenation(priority: 1)
    UnnecessaryBigDecimalInstantiation(priority: 1)
    UnnecessaryBigIntegerInstantiation(priority: 1)
    UnnecessaryBooleanExpression(priority: 1)
    UnnecessaryBooleanInstantiation(priority: 1)
    UnnecessaryCallForLastElement(priority: 1)
    UnnecessaryCallToSubstring(priority: 1)
    UnnecessaryCast(priority: 1)
    UnnecessaryCatchBlock(priority: 1)
    //UnnecessaryCollectCall(priority: 1)
    UnnecessaryCollectionCall(priority: 1)
    UnnecessaryConstructor(priority: 1)
    UnnecessaryDefInFieldDeclaration(priority: 1)
    UnnecessaryDefInMethodDeclaration(priority: 1)
    UnnecessaryDefInVariableDeclaration(priority: 1)
    UnnecessaryDotClass(priority: 1)
    UnnecessaryDoubleInstantiation(priority: 1)
    UnnecessaryElseStatement(priority: 1)
    UnnecessaryFinalOnPrivateMethod(priority: 1)
    UnnecessaryFloatInstantiation(priority: 1)
    //UnnecessaryGString
    UnnecessaryIfStatement(priority: 1)
    UnnecessaryInstanceOfCheck(priority: 1)
    UnnecessaryInstantiationToGetClass(priority: 1)
    UnnecessaryIntegerInstantiation(priority: 1)
    UnnecessaryLongInstantiation(priority: 1)
    UnnecessaryModOne(priority: 1)
    UnnecessaryNullCheck(priority: 1)
    UnnecessaryNullCheckBeforeInstanceOf(priority: 1)
    UnnecessaryOverridingMethod(priority: 1)
    UnnecessaryPackageReference(priority: 1)
    UnnecessaryParenthesesForMethodCallWithClosure(priority: 1)
    UnnecessaryPublicModifier(priority: 1)
    //UnnecessaryReturnKeyword
    UnnecessarySafeNavigationOperator(priority: 3)
    UnnecessarySelfAssignment(priority: 1)
    UnnecessarySemicolon(priority: 1)
    UnnecessaryStringInstantiation(priority: 1)
    UnnecessarySubstring(priority: 1)
    UnnecessaryTernaryExpression(priority: 1)
    UnnecessaryToString(priority: 1)
    UnnecessaryTransientModifier(priority: 1)

    // rulesets/unused.xml
    UnusedArray(priority: 1)
    //UnusedMethodParameter
    UnusedObject(priority: 1)
    UnusedPrivateField(priority: 1)
    UnusedPrivateMethod(priority: 1)
    UnusedPrivateMethodParameter(priority: 1)
    UnusedVariable(priority: 1)

    // custom rules
    IllegalRegex(regex: /\t/, violationMessage: 'Line contains a tab character, please remove it.', name: 'TabCharacter', description: 'This check ensures that files are consistently indented with spaces.', priority: 1)
    IllegalRegex(regex: /long serialVersionUID/, violationMessage: 'Classes must not declare an explicit serialVersionUID, please remove the field.', name: 'ManualSerialVersion', description: 'Verifies that no explicit serialVersionUID has been declared in a class, judging when binary compatibility is broken is hard, it is a very frequent mistake that this id is not incremented, best rely on the auto generated id in all cases.', priority: 1)
    IllegalRegex(regex: /@Ignore/, violationMessage: 'Ignored unit test, please remove the test or fix it.', name: 'IgnoredTestCase', description: 'Highlights ignored tests, tests are allowed to be temporarily @Ignored while work is in progress.', priority: 3)
    IllegalRegex(regex: /@SuppressWarnings/, violationMessage: 'Suppressed warning, to fix this warning fix the original warning if possible, never suppress this warning.', name: 'SuppressedWarning', description: 'Highlights suppressed warnings, warnings should only be rarely suppressed, even then they need to be traced, this check essentially ensures that all violations are reported at least at priority 3.', priority: 3)
    IllegalRegex(regex: /TODO/, violationMessage: 'TODO comment found, please address the todo and remove the comment', name: 'TodoComment', description: 'This check highlights TODO comments, which are only temporarily allowed to be present in code.', priority: 3)
    IllegalRegex(regex: /FIXME/, violationMessage: 'FIXME comment found, please implement a fix and remove the comment', name: 'FixmeComment', description: 'This check highlights FIXME comments, which are only temporarily allowed to be present in code.', priority: 3)
}
